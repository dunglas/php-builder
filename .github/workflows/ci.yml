name: Build PHP

on:
  push:
  pull_request:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      build-mode:
        description: 'Build mode: --build-all or --build--new'
        default: '--build-new'
        required: false
      php-source:
        description: 'PHP source: --web-php or --php-src'
        default: '--web-php'
        required: false
  schedule:
    - cron: '0 0 * * *'

env:
  #CONTAINER_OS_LIST: ubuntu:bionic ubuntu:focal ubuntu:jammy debian:buster debian:bullseye
  #RUNNER_OS_LIST: ubuntu-18.04 ubuntu-20.04 ubuntu-22.04
  #PHP_LIST: 8.0 8.1 8.2 8.3
  #SAPI_LIST: apache2 cgi cli embed fpm phpdbg
  CONTAINER_OS_LIST: ubuntu:bionic
  RUNNER_OS_LIST: ubuntu-18.04
  PHP_LIST: 8.1
  SAPI_LIST: apache2 cgi cli embed fpm phpdbg
  BUILD_LIST: debug release

jobs:
  get-matrix:
    runs-on: ubuntu-latest
    outputs:
      container_os_matrix: ${{ steps.set-matrix.outputs.container_os_matrix }}
      runner_os_matrix: ${{ steps.set-matrix.outputs.runner_os_matrix }}
      sapi_matrix: ${{ steps.set-matrix.outputs.sapi_matrix }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get matrix
        id: set-matrix
        env:
          COMMIT: ${{ github.event.head_commit.message || github.event.inputs.build-mode }}
          CONTAINER_OS_LIST: ${{ env.CONTAINER_OS_LIST }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUNNER_OS_LIST: ${{ env.RUNNER_OS_LIST }}
          PHP_LIST: ${{ env.PHP_LIST }}
          PHP_SOURCE: ${{ github.event.inputs.php-source }}
          SAPI_LIST: ${{ env.SAPI_LIST }}
          BUILD_LIST: ${{ env.BUILD_LIST }}
        run: bash scripts/get-matrix.sh

  build:
    needs: get-matrix
    if: "!contains(github.event.head_commit.message, 'skip-build')"
    runs-on: ${{ matrix.operating-system }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      max-parallel: 60
      matrix: ${{fromJson(needs.get-matrix.outputs.sapi_matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install required packages
        run: bash scripts/install-requirements.sh
        env:
          BUILD: ${{ matrix.build }}

      - name: Build and package
        run: bash scripts/build.sh build_sapi ${{ matrix.sapi }}
        env:
          BUILD: ${{ matrix.build }}
          SAPI_LIST: ${{ env.SAPI_LIST }}
          GITHUB_MESSAGE: ${{ github.event.head_commit.message || github.event.inputs.build-mode }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PHP_VERSION: ${{ matrix.php-version }}
          PHP_SOURCE: ${{ github.event.inputs.php-source }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: php-sapi${{ matrix.php-version }}-${{ matrix.build }}+${{ matrix.dist }}-${{ matrix.dist-version }}
          path: /tmp/*.zst

  merge:
    needs: [get-matrix, build]
    if: "!contains(github.event.head_commit.message, 'skip-merge')"
    container: ${{ matrix.container }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-matrix.outputs.container_os_matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install required packages
        run: bash scripts/install-requirements.sh
        env:
          BUILD: ${{ matrix.build }}

      - uses: actions/download-artifact@v2
        with:
          name: php-sapi${{ matrix.php-version }}-${{ matrix.build }}+${{ matrix.dist }}-${{ matrix.dist-version }}
          path: /tmp

      - name: Stage builds
        shell: bash
        run: |
          for sapi_build in /tmp/*.zst; do
            tar -I zstd -xf "$sapi_build" -C /tmp
            rm -f "$sapi_build"
          done

      - name: Build and package
        run: bash scripts/build.sh merge
        env:
          BUILD: ${{ matrix.build }}
          SAPI_LIST: ${{ env.SAPI_LIST }}
          GITHUB_USER: ${{ github.repository_owner }}
          GITHUB_MESSAGE: ${{ github.event.head_commit.message || github.event.inputs.build-mode }}
          GITHUB_NAME: 'Shivam Mathur'
          GITHUB_EMAIL: ${{ secrets.email }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PHP_VERSION: ${{ matrix.php-version }}
          PHP_SOURCE: ${{ github.event.inputs.php-source }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: php${{ matrix.php-version }}-${{ matrix.build }}+${{ matrix.dist }}
          path: |
            /tmp/*.xz
            /tmp/*.zst

      - name: Check php-cli version
        run: |
          php -v
          php -r "if(strpos(phpversion(), '${{ matrix.php-version }}') === false) {throw new Exception('Wrong PHP version Installed');}"

      - name: Check php-cgi version
        run: php-cgi -v

      - name: Check php-fpm version
        run: php-fpm -v && php-fpm -t

      - name: Check phpdbg version
        run: phpdbg -V

      - name: Check pecl version
        run: pecl -V

      - name: Check php-config version
        run: php-config --version

      - name: Check phpize version
        run: phpize -v

      - name: Check php extensions
        run: |
          php -m
          ln -sf /etc/php/${{ matrix.php-version }}/mods-available/pcov.ini /etc/php/${{ matrix.php-version }}/cli/conf.d/20-pcov.ini
          for extension in amqp apcu ds igbinary imagick memcache memcached mongodb msgpack pcov redis xdebug sqlsrv pdo_sqlsrv; do
            php -r "if(! extension_loaded(\"$extension\")) {throw new Exception(\"$extension not found\");}"
          done

  local-test:
    needs: [merge, build, get-matrix]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-local-test')"
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-matrix.outputs.container_os_matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v2
        with:
          name: php${{ matrix.php-version }}-${{ matrix.build }}+${{ matrix.dist }}
          path: /tmp

      - name: Install PHP
        run: |
          sed -i '/builds/d' scripts/install.sh
          bash scripts/install.sh ${{ matrix.php-version }} local ${{ matrix.build }}

      - name: Test
        run: |
          php -v
          php -r "if(strpos(phpversion(), '${{ matrix.php-version }}') === false) {throw new Exception('Wrong PHP version Installed');}"
          php -m
          
      - name: Check GD support
        run: php -r "print_r(gd_info());"

      - name: Test pecl
        run: |
          sudo pecl install -f psr
          php -m | grep -q psr || exit 1

      - name: Check SAPI
        run: |
          sudo mkdir -p /var/www/html
          sudo rm -rf /var/www/html/index.html
          echo "<?php echo current(explode('-', php_sapi_name())).':'.strtolower(current(explode('/', \$_SERVER['SERVER_SOFTWARE']))).\"\n\";" | sudo tee /var/www/html/index.php >/dev/null
          for sapi in apache2handler:apache fpm:apache cgi:apache fpm:nginx; do
            switch_sapi -v ${{ matrix.php-version }} -s $sapi
            resp="$(curl -s http://localhost)"
            [ "$sapi" != "$resp" ] && exit 1 || echo "$resp"
          done

  github-test:
    needs: [merge, build, get-matrix]
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'skip-github-test')"
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-matrix.outputs.runner_os_matrix)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v2
        with:
          name: php${{ matrix.php-version }}-${{ matrix.build }}+ubuntu
          path: /tmp

      - name: Install PHP
        run: |
          sed -i '/builds\/$tar_file/d' scripts/install.sh
          bash scripts/install.sh ${{ matrix.php-version }} github ${{ matrix.build }}

      - name: Test
        run: |
          php -v
          php -r "if(strpos(phpversion(), '${{ matrix.php-version }}') === false) {throw new Exception('Wrong PHP version Installed');}"
          php -m

      - name: Test pecl
        run: |
          sudo pecl install -f psr
          php -m | grep -q psr || exit 1

      - name: Check SAPI
        run: |
          sudo mkdir -p /var/www/html
          sudo rm -rf /var/www/html/index.html
          echo "<?php echo current(explode('-', php_sapi_name())).':'.strtolower(current(explode('/', \$_SERVER['SERVER_SOFTWARE']))).\"\n\";" | sudo tee /var/www/html/index.php >/dev/null
          for sapi in apache2handler:apache fpm:apache cgi:apache fpm:nginx; do
            sudo switch_sapi -v ${{ matrix.php-version }} -s $sapi
            resp="$(curl -s http://localhost)"
            [ "$sapi" != "$resp" ] && exit 1 || echo "$resp"
          done

  release:
    needs: [local-test, github-test]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip-release')"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create builds directory
        run: mkdir builds

      - uses: actions/download-artifact@v2
        with:
          path: builds

      - name: Release
        run: bash scripts/release.sh
        env:
          GITHUB_MESSAGE: ${{ github.event.head_commit.message || github.event.inputs.build-mode }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PHP_SOURCE: ${{ github.event.inputs.php-source }}
